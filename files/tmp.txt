function a(b){console.log(b)}
function b(){return 'its b'}
a(b)


let c = function(){console.log(b)}
let d = function(){return 'its d'}
c(d)



a = [1,2,3]
a.entries()

b = {one:1, two:2}
Object.keys(b)
Object.valuse(b)
Object.entries(b)

// sets and maps

// first class function and higher order function

// call , apply and bind methods in js for functions
// immideate invoke function expression
// closures in js 



// for throwaway paramiters we use _ in js
// now what is throwaway params? as you know in js there is no concept of named params so we have to pass params in sequese but some time we are intrested in just spacific params but to pass it we have to pass in line

ex [1,2,3].forEach((el, _ , arr)=>{

})

like above we are intrusted in el and actual array params but for pass array we need to pass index param as well even if we don't want it because it works in same sequence so we can use _ for that to tell other devs that middle param is not require but we pass it for pass other params


want to modify actual array then forEach otherwise map




- when we call function from object then this keyword will point to object calling functions
- when we call function direct like in functional programing then this keyword will point
  if strict mode then to undefine and if not strict mode then global browser object (Window) 
- when we use arrow function then arrow function don't have there own this keyword so in arrow 
function this will point to it's parent scope.
- when function call as event listener then this will point to dom element on witch function is called


- when there is injex.js file in any folder and we do import abc from forlde_name then js will go to index.js file to find that and import it from that index.js file so we don't need to specify index.js file mame if we want to import any thing from it
ex: import abc from './lib' 
this will find abc in lib/index.js file and impoort it
